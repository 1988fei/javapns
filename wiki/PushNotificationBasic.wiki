#summary Basic Push Notification
#labels Phase-Implementation

= Basic Push Notification =

====Pushing a simple notification to a single device====
<code>
import javapns.`*`;
	
public class PushTest {

	public static void main(String`[]` args) {
	
		Push.alert("Hello World!", "keystore.p12", "keystore_password", false, "Your token");

	}
}</code>

The `alert` method's first parameter is the alert message itself.  The second parameter is a reference to your keystore;  it can be either a `java.io.File`, a `java.lang.String` (path to your keystore file), a `java.io.InputStream` or a `byte[]` array.  The third parameter is your keystore's password.  The fourth parameter selects the production (`true`) or sandbox (`false`) service.  The fifth parameter is a device token (64-bytes) to push the alert to.  

<br />

====Pushing a simple notification to multiple devices====

If you need to push a notification to multiple devices, you should pass your list of device tokens directly to the alert method _(or any other push method you use)_, instead of creating a loop and invoking the alert method repetitively with each token.  This is because Apple strongly encourages users to send multiple notifications on a single connection, instead of opening and closing connections for each notification.  Passing your list of device tokens directly to javapns will allow the library to optimize the connection usage.

Example:

<code>
import javapns.`*`;
	
public class PushTest {

	public static void main(String`[]` args) {
		String`[]` devices = {"token 1", "token 2"};
		Push.alert("Hello World!", "keystore.p12", "keystore_password", false, devices);
	}
}</code>

<br />

====Pushing other kinds of notifications====

There are other kinds of predefined notifications you can send from the `Push` class, such as sound, badge or combined.  You can also build a payload manually by instantiating a `PushNotificationPayload` object, configure it according to your mobile application's needs, and push it using the `payload` method in the `Push` class.

Refer to the [Documentation javadoc] for more information about using the library, or see the [PushNotificationAdvanced Advanced Push Notification] wiki page.

<br />

====More detailed example====
A more detailed and functional example can be seen in the library's source code.  See class `javapns.test.NotificationTest`.

<br />

====Managing push errors====
After pushing notifications, you need to manage errors.  Errors can occur if you try to push a notification to a device that has become inactive, if a device token is invalid, or other kinds of issues.  See the * [ManagingPushErrors Managing Push Errors] * page for information and examples on how to manage errors.