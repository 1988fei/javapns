#summary Using javapns 2.0

= javapns 2.0=
== Requirements ==

  * Java 1.5
  * Open-source libraries:
    * [http://commons.apache.org/downloads/download_lang.cgi commons-lang-2.4.jar]
    * [http://commons.apache.org/downloads/download_io.cgi commons-io-1.4.jar]
    * [http://www.bouncycastle.org/latest_releases.html bcprov-jdk15-145.jar]
    * [http://logging.apache.org/log4j/1.2/download.html log4j-1.2.15.jar]
  * SSL certificate provided by Apple + private key, exported as a PKCS12 keystore file
  * Device Token ID  _(example: 2ed202ac08ea9033665d853a3dc8bc4c5e98f7c6cf8d55910df290567037dcc4)_
  * iPhone app


== Usage ==

*At this time, javapns 2.0 is only available by checking out the `javapns2` branch and building it.*

javapns 2.0 is designed so it can be plugged into existing projects and use their own data storage systems for devices and applications. However, the library includes its own basic implementations of these objects, so you can get started in no time.


===Basic===
Pushing a simple notification:
<code>
import javapns.communication.`*`;
import javapns.devices.`*`;
import javapns.notification.`*`;
	
public class PushTest {

	public static void main(String[] args) {
		PushNotificationManager pushManager = new PushNotificationManager();
		pushManager.addDevice("my_iPhone", "Your token");  // Provide your token
		PayLoad simplePayLoad = new PayLoad();
		simplePayLoad.addAlert("Hello World!");
		Device client = pushManager.getDevice("my_iPhone");
		
		AppleNotificationServer server = new AppleNotificationServerBasicImpl(
			"Path to .p12 keystore file", // Provide path to your keystore
			"Password for keystore",  // Provide your keystore's password
			ConnectionToAppleServer.KEYSTORE_TYPE_PKCS12, 
			"gateway.sandbox.push.apple.com", 2195);
			
		pushManager.initializeConnection(server);
		pushManager.sendNotification(client, simplePayLoad);
	}
}
</code>


===Persisted with JPA===
  * Implement `javapns.devices.Device` as a POJO in your project
  * Implement `javapns.devices.DeviceFactory ` to hookup to your own DAO, or invoke JPA directly:
<code>
import java.util.`*`;
import javax.persistence.`*`;
import javax.persistence.criteria.`*`;
import javapns.devices.`*`;
import javapns.devices.exceptions.`*`;

public class DeviceFactoryImpl implements DeviceFactory {
	
	private EntityManager entityManager; // Your EntityManager instance

	public Device addDevice(String id, String token) throws Exception {
		Device device = new DeviceImpl(id, token); // Your implementation of Device
		entityManager.persist(device);
		return device;
	}

	public Device getDevice(String id) throws UnknownDeviceException, NullIdException {
		CriteriaBuilder qb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Device> query = qb.createQuery(Device.class);
		Root<Device> device = query.from(Device.class);
		query.where(qb.equal(device.get("id"), id));
		List<Device> result = entityManager.createQuery(query).getResultList();
		return result.size() >= 1 ? result.get(0) : null;
	}

	public void removeDevice(String id) throws UnknownDeviceException, NullIdException {
		entityManager.remove(getDevice(id));
	}
}
</code>
  * Instantiate your `DeviceFactoryImpl` (can be instantiated by Spring)
  * Instantiate a `javapns.notification.PushNotificationManager` and invoke `setDeviceFactory(your DeviceFactoryImpl)` _(PushNotificationManager can be instantiated and DeviceFactoryImpl injected by Spring)_
  * Instantiate a `javapns.feedback.FeedbackServiceManager` and invoke `setDeviceFactory(your DeviceFactoryImpl)` _(FeedbackServiceManager can be instantiated and DeviceFactoryImpl injected by Spring)_
  * From your code, use the `PushNotificationManager` and `FeedbackServiceManager` _(both can be injected by Spring)_ as in the Basic example
  * You can also implement your own `AppleNotificationServer` and `AppleFeedbackServer` so that connection configuration to Apple servers is stored in JPA as well


===Debugging===
javapns uses Log4J for logging. To enable logging quickly, add the following code:
<code>
import org.apache.log4j.`*`;
</code>
and before using javapns in your code:
<code>
		try {
			BasicConfigurator.configure();
		} catch (Exception e) {
		}
</code>
